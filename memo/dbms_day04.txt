day04 

[어제]
1. 모델링
	1) 요구사항분석 -> 개념적 -> 논리적 -> 물리적 -> 구현
	인식,도출,추상화 -> ERD  -> 키설정 -> 타입  -> SQL

2. 추가) 심화
   1) 기본키가 여러개 있을 때 설정하는 방법 - 테이블을 생성할 때,

	CREATE TABLE POT2(
	
	ID VARCHAR2(10),
	COLOR VARCHAR2(10),
	NAME VARCHAR2(10),
	SHAPE VARCHAR2(10),
	--PRIMARY KEY 제약조건
	CONSTRAINT POT2_PK PRIMARY KEY(ID, NAME)
	CONSTRAINT POT_FK FOREIGN KEY(NAME)
		REFERENCES FLOWER2(NAME)
	);

   2) 생성하고 난 뒤, 기본키를 새롭게 설정할 수 있다.


	CREATE TABLE POT2(
	
	ID VARCHAR2(10),
	COLOR VARCHAR2(10),
	NAME VARCHAR2(10),
	SHAPE VARCHAR2(10),
	
	);

	--만약 기본키를 차후에 수정 하고자 한다면...
	  기존에 있는 기본키를 모두 삭제해야 한다!!

	ALTER TABLE POT2 DROP PRIMARY KEY; 
	--POT2에 있는 기본키 설정을 지우자
	ALTER TABLE POT2 ADD CONSTRAINT PK_POT2
		PRIMARY KEY(COLOR, SHAPE);

	--컬럼을 여러개 추가하면서... 그 중에 기본키를 설정할 수 있다.
	ALTER TABLE POT2 DROP PRIMARY KEY; --먼저 기존 기본키를 삭제

	ALTER TABLE POT2 ADD(
		컬럼1 VARCHAR2(3) NOT NULL,
		컬럼2 VARCHAR2(5) NOT NULL,
		컬럼3 CHAR(5) CONSTRAINT PK_컬럼
			PRIMARY KEY
	); 	  

[실습] 자신이 만든 테이블을 바탕으로 위에 내용 실습해 보기
================================================================================
◆ 오늘 : DML (data manipulation language)

 1. 종류
	1) select : 조회 Read
		(1) dual 테이블
		(2) alias
		(3) where 조건절 연산자
		(4) order by
	   ※ 서브쿼리!!!
	2) insert : 삽입 Create
	3) update : 수정 Update
	4) delete : 삭제 Delete
=====================================================================================
 1. select
	SELECT 보고싶은 컬럼 FROM 테이블

	WHERE [조건절 - 연산자]

	GROUP BY [컬럼] HAVING [조건]

	ORDER BY [내림차순, 오름차순];

  1) DUAL 테이블

	DUAL 은 테이블이다. SYS가 소유하고 있지만... 모든 계정이 접근할 수 있는 (가상) 테이블
	실제 데이터는 존재하지 않고, 1개의 더미 데이터만 존재한다.

	콘솔] SQL> DESC DUAL;
	1+2 결과값이 어떻게 되는 지 조회 하고 싶다!
	select 1+2 from 테이블;

	SQL> select 1+2 from dual;

       	1+2
	----------
         3

	※ 현재 시간을 보고 싶다.
	SELECT SYSDATE FROM DUAL;

  2) Alias : 컬럼이나 테이블에 별칭을 붙일 수 있다
	
	현재시간
	SELECT SYSDATE as 현재시간 FROM DUAL; as가 alias 기능
	--as를 생략해도 된다
	SELECT SYSDATE 현재시간 FROM DUAL;

	--만약에 별칭(alias)에 공백이 있을 때는, 쌍따옴표로 묶어 주면된다.
	select sysdate "오늘 시간과 날짜" from dual;

	--여러개의 날짜 연산을 해보자!

select
	sysdate-1000 "1000일 전"
	sysdate "오늘 날짜",
	sysdate+1000 "1000일 후",
	sysdate+48/24 "2일 후", 24시간
	sysdate+ 3/24 "3시간 후
from
	dual


※ 날짜관련 연산
--날짜 + 숫자 : 지난 날짜
--날짜 - 숫자 : 이전 날짜
--날짜 - 날짜 : 두 날짜 사이의 기간

--emp 작업, 사용할 컬럼
--근무 개월 수 체크 : MONTH_BETWEEN(A, B) A, B 날짜 사이의 "개월수"를 구한다

	SELECT ENAME, SYSDATE "금일", MONTHS_BETWEEN(SYSDATE, HIREDATE) FROM EMP;
	
	※ 소수점이 발생한다.. 소수점을 없애는 함수 TRUC(값)

SELECT ENAME, SYSDATE "금일", 
	TRUNC(MONTHS_BETWEEN(SYSDATE, HIREDATE)) "개월수" 
FROM EMP;

	--TRUNC(값, 자리값)
SELECT 10/3 FROM EMP;
SELECT TRUNC(10/3) FROM EMP; --정수부만!!!
--SELECT TRUNC(10/3, 자리값) FROM EMP; --정수부만!!!
SELECT TRUNC(10/3, 2) FROM EMP; --정수부만!!!


[실습]
근무 개월 수 구했는데 -> 근무 년수로 환산해 보자
SELECT 

	TRUNC(MONTHS_BETWEEN(SYSDATE, HIREDATE) / 12) 근속 년수

FROM EMP;

※ 날짜관련 형변환 : 날짜 타입의 데이터 -> 문자 형테로 변결할 수 있다.
			HIREDATE -> STRING
				TO_CHAR()함수를 이용한다.
		(TO_CHAR(123) -> 정수를 문자열로 변경할 때도 쓴다.)
	날짜 -> 문자로
	문자 -> 날짜로

--날짜를 기본 출력 형식과 다른 형태로 출력하고 싶다.
--형식 지정, 'YYYY-MM-DD' FORMAT
SELECT SYSDATE, TO_CHAR(SYSDATE, 'YYYY-MM-DD') FROM DUAL;

--날짜 + 시간 형식 +요일까지
SELECT SYSDATE, TO_CHAR(SYSDATE, 'YYYY-MM-DD HH:MI:SS') FROM EMP;

--요일까지
SELECT SYSDATE, TO_CHAR(SYSDATE, 'YYYY-MM-DD DAY HH:MI:SS') FROM EMP;


※ 문자열을 날짜로 형변환 시킬 때 : TO_DATE() 함수를 사용하자
--고용일이 19801217 인 직원이 있다!
--이 고용일 정보를 조건으로 이름과 고용일을 보고싶다.
--SELECT ENAME, HIREDATE FROM EMP WHERE HIREDATE = 19801217;

SELECT ENAME, HIREDATE FROM EMP 
WHERE HIREDATE = TO_DATE(19801217, 'YYYYMMDD'); --정수든 문자열이든 상관없다

--결과표를 보면.. 이 날짜에 고용된 사람이 SMITH인걸 알 수 있게 된다!!!


(3) WHERE : 조건과 연산
형식] emp 테이블에서... job이 clerk인 사람을 모두 찾아라.

SELECT * FROM EMP WHERE JOB = 'CLERK'; 
--'=' EQUAL 같니?, 대입 := (콜론 =)

실습] EMP 테이블에서 매니저가 7902인 사람의 직원번호, 이름, job 을 출력할 것
SQL>
SELECT EMPNO, ENAME, JOB FROM EMP WHERE MGR = 7902;


-------------------------------------------------------------------
기존 테이블 복사하기 : 원본 테이블에 INSERT, UPDATE, DELETE 하지 말자!!
EMP 우클릭 -> 데이터 내보내기 -> 데이터베이스 테이블 선택
	-> 'Scott.emp' 선택 -> 한단 new table name 버튼 클릭
	-> emp_test -> next -> next 
-------------------------------------------------------------------


  -연산자
    1) 산술연산자 : +, -, *, / 
    2) 비교연산자 : =, !=, >, <, >=, <=
    3) 논리연산자 : NOT, AND, OR
    4) SQL 연산자 : IN, ANY, ALL, BETWEEN, LIKE, IS, NULL, IS NOT NULL..... %
    5) 결합 연산자 : ||
    6) 조건 연산자(=비교 연산자와 동일) : 숫자, 문자, 날짜의 크리나 순서를 비교하는 연산자

 예제) 
--숫자 조건 : EMP 테이블에서 SAL이 1500이상인 사원의 정보를 조회
SELECT * FROM EMP WHERE SAL > 1500;

--문자 조건 : 이름이 KING인 사람 조회
SELECT * FROM EMP WHERE ENAME = 'KING';

--날짜 조건 : 81/02/20 이전에 입사한 사람들을 조회
SELECT * FROM EMP WHERE HIREDATE < TO_DATE('1981-02-20', 'YYYY-MM-DD');

--비교 : 부서번호가 30번이 "아닌" 사람들의 모든 정보를 조회
SELECT * FROM EMP WHERE DEPTNO != 30;

--비교+논리 : 부서번호가 30이고 급여가 2000 이상인 사원들의 사원이름과 급여, 부서번호를 조회
SELECT ENAME, SAL, DEPTNO FROM EMP WHERE DEPT = 30 AND SAL > 2000;

--논리 : 직업이 MANAGER가 아닌 사람들 조회
SELECT * FROM EMP WHERE JOB != 'MGR';

--비교+논리 : 부서번호가 10번이거나 20번인 사람들의 부서번호와 사원이름을 조회 (IN 사용)
SELECT DEPTNO, ENAME WHERE DEPTNO IN(10,20); --WHERE DEPTNO=10 OR DEPTNO=20;

--SQL 연산자 : 급여가 1000이상 3000이하의 사원들을 조회 (BETWEEN)
SELECT * FROM EMP WHERE SAL BETWEEN 1000 AND 3000;

--SQL 연산자 : 사원이름이 'J'로 시작하는 사원의 사원번호와 이름을 조회(LIKE)
SELECT EMPNO, ENAME FROM EMP WHERE ENAME LIKE 'J%' --J로 시작해야 된다!! J로 시작하는 문자열

--SQL 연산자 : 사원이름이 'T'를 포함하는 사원의 정보를 조회
SELECT * FROM EMP WHERE ENAME LIKE '%T%';  --%문자% 문자열에 T를 포함하고 있는...

--SQL 연산자 : 사원이름 2번째 글자가 'A'인 사원 조회 (LIKE) --글자 하나를 카운트 할때는 _밑줄 하나
SELECT * FROM EMP WHERE ENAME LIKE '_A%'; --첫번째가 아닌 두번째 그래서 _밑줄을 쓴다 처음에

--SQL 연산자 : 81년도에 입사한 사원을 조회 (LIKE)
SELECT * FROM EMP WHERE HIREDATE LIKE '%81%; --형변환 없이 실행 되는지 확인해 보자!!!

--SQL 연산자 : 커미션이 NULL인 사원들 조회
SELECT * FROM EMP WHERE COMM IS NULL;

--결합 연산자 : 컬럼과 문자열을 결합한다. || 연산자 사용
SELECT ENAME || '의 급여는' || SAL || '입니다' FROM EMP;





  4) ORDER BY : 정렬방식 키값이 2개  내림차순, 오름차순
				DESC,  ASC
	SELECT
	FROM
	WHERE
	ORDER BY 대상 컬럼 DESC OR ASC

  예제) 월급(SAL)을 기준으로 내림차순 정렬 한 후 출력해라
	SELECT * FROM EMP ORDER BY SAL DESC;

  예제) 2차 정렬
	SALARY로 오름차순 정렬 한 후, 같은 값이 있으면 그때는 기준을 EMPNO로 내림차순 정렬할 것

	SELECT * FROM EMP ORDER BY SAL ASC, EMPNO DESC;
------------------------------------------------------------------------------------------

2. INSERT : 추가, 삽입 (자바에서 new 에 해당)
	형식#1] 테이블 (필드명들) values(필드값들)

		insert into [테이블] (필드명1, 필드명2...)
			values(필드값1, 필드값2....)

	형식#2] (필드명들)을 생략한다

		insert into 테이블 values(값1, 값2...);
		--필드명이 생략되어 있다.
		--테이블 구조를 보고 컬럼 순서대로 값을 넣어햐 한다.

	형식#3] 서브쿼리를 이용해 데이터를 삽입한다.
		insert into 테이블 (col1, col2, col3)
			select col1, col2, col3 from 데이터를 가져올 테이블
			where 조건절;

	요구사항] 쿼리를 이용해 데이터를 가져와 보자
		info 테이블 생성
		emp 테이블에서 부서번호, 이름, 직급, 관리자 항목을 가져온다.
		조건 : JOB이 CLERK 인 사람만 가져와라!
		info 테이블 명세
		- id_no  타입결정 어떻게???
		- name
		- job
		- bunho
		
		CREATE TABLE INFO(
		
		ID_NO NUMBER(4),
		NAME VARCHAR2(10),
		JOB VARCHAR2(9),
		BUNHO NUMBER(4)
		);

		INSERT INTO INFO (ID_NO, NAME, JOB, BUNHO)
		SELECT EMPNO, ENAME, JOB, MGR FROM EMP
		WHERE JOB = 'CLERK';
		

	
★ EMP_TEST에서 작업하자!!!
3. UPDATE
형식]
	UPDATE 수정할 데이터가 있는 테이블명 SET
		수정할 필드1 = '값',
		수정할 필드2 = '값',
		수정할 필드3 = '값',
	WHERE 조건절; --WHERE 절을 생략하면 위에 수정할 필드에 모두 적용된다!

실습] 부서번호가 20인 사람들을 모두 찾아서... 이름을 SUPERMAN으로 변경
	UPDATE EMP_TEST SET
		ENAME = 'SUPERMAN'
	WHERE DEPTNO = 20;

실습] 이름에 A가 들어가는 사람들 찾아 'A-MAN'으로 변경해 주세요
	UPDATE EMP_TEST SET
		ENAME = 'A-MAN'
	WHERE ENAME LIKE '%A%';

실습] 이름에 A가 들어가는 사람을 찾아.. 현재이름 + '-TAG' 을 붙여주세요.
	UPDATE EMP_TEST SET
		ENAME = ENAME || '-TAG'
	WHERE ENAME LIKE '%A%';	

완료] 현재 EMP_TEST에 있는 모든 데이터 지우기!
	DELETE TABLE EMP_TEST; --모든 데이터 지워라! --웬만하면 조건절없이 DELETE 사용은 주의해야한다!
	또는
	TRUNCATE TABLE EMP_TEST; --TRUNCATE가 DELTE 보다 더 빠르다!

실습] EMP 테이블에서 모든 데이터 가져와서 EMP_TEST에 값 삽입하기... (INSERT 이용)
	INSERT INTO EMP_TEST(컬1, 컬2...X 필요가 없다) SELECT * FROM EMP
		↓
	INSERT INTO EMP_TEST SELECT * FROM EMP


4. DELETE
형식] DELETE FROM 테이블명 
	WHERE 조건식;

실습] 부서 번호 10인 사람들 삭제하기
-- 다시 INSERT 문장 실행해서 데이터 삽입하기!!! 루틴 반복!!!!
	DELETE FROM EMP_TEST
	WHERE DEPTNO = 10;
	
	INSERT INTO EMP_TEST
	SELECT * FROM EMP WHERE DEPTNO = 10;

실습] 81/02/20 이전에 입사한 사람들 삭제하기
-- 방금 삭제한 데이터 다시 삽입해 놓기!!!
	DELETE FROM EMP_TEST
	WHERE HIREDATE < TO_DATE(81/02/20, 'YY/MM/DD');

DML 종료!!!















