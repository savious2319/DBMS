JOIN
	여러 테이블에 흩어져 있는 정보 중
	사용자가 필요한 정보만 가져와서 가상의
	테이블처럼 만들고 결과를 보여주는 것

	조회 테이블이 너무 많으면 느리기 때문에
	입력, 수정, 삭제의 성능을 향상시키기 위해서 사용.

- 내부 조인(Inner Join) : Inner 생략 가능
	조건이 일치하는 값이 두 테이블에 모두 존재할 때 조회

테이블명 INNER JOIN 테이블명
ON 조건식

테이블명 JOIN 테이블명
ON 조건식

테이블명 테이블명, 테이블명
WHERE 조건식

등가 조인 : ON절에 등호가 있는 JOIN
비등가 조인 : ON절에 등호가 없는 JOIN

***********************************************************
ON절에 사용되는 조건식은 JOIN을 할 때 적용되며,
WHERE절에 사용되는 조건식은 모든 JOIN이 완료된 후 적용된다.
따라서 불필요한 데이터를 JOIN할 필요 없이 되도록 ON절에서
모두 끝내주는 것이 좋다.
***********************************************************

- 외부 조인(Outer Join)
	조건이 일치하지 않더라도 지정한 테이블의 모든 정보를 조회	
-----------------------------------------------------------------------
DCL

	GRANT TO	: 권한을 부여하는 명령어
	REVOKE FROM	: 권한을 박탈하는 명려어


TableSpace
	테이블이 저장될 공간

TABLESPACE를 먼저 만들고 TABLE을 생성한다.

1. HR 계정에서 계정 한 개 생성
2. SYSTEM 계정에서 만든 계정에 CREATE SESSION 권한 부여
3. SYSTEM 계정에서 만든 계정에 CREATE TABLE 권한 부여
4. 만든 TABLESPACE 이름과 계정을 동일하게 만들기
5. 만든 TABLESPACE에 계정을 등록
6. TEMPORARY TABLESPACE에 등록
7. TABLESPACE 할당량 설정
8. HR계정에 있는 PLAYER 테이블 복사해서 테이블 생성(AS)
9. NICKNAME이 NULL인 선수 모두 본인 이름으로 수정
10. DBEAVER에서 쿼리문으로 결과 확인
-------------------------------------------------------------------------------
MVC(소프트웨어 디자인 설계 패턴)

	외부 저장소로부터 받은 데이터를 개발 페이지에서
	역할별로 분리하여 다룰 수 있도록 설계하는 방식
	아주 조그마한 프로젝트에서는 MVC 패턴을 사용하지 않는다.
	오히려 더 복잡해지기 때문이다.
	하지만 JAVA를 사용하는 거의 모든 프로젝트는 MVC 패턴을 채택하여 설계한다.	

요소
	Model(VO, DTO)
		외부 저장소에서 받아온 결과 값을 저장할 수 있는
		클래스가 있으며, 이 클래스들이 모여있는 부분	
		각 클래스 필드는 해당 테이블의 컬럼명으로
		선언되어 있으며 받드시 private 접근자로 지정한다.
		테이블 별로 클래스를 선언하는 것이 좋다.


	View(index, home, ...)
		사용자에게 보여질 화면을 구현하는 파일을 의미한다.
		각각의 레이아웃에서 필요한 데이터가 있다면, Controller에 있는
		메서드를 호출하여 외부 저장소로부터 가지고 온 후 결과 값을 
		뿌리는 부분이다.		


	Controller(DAO)
		외부 저장소에 접근할 수 있도록 SQL문을 작성하는
		클래스 파일이 모여 있는 부분.
		각 SQL문을 작성하기 위해서는 메서드가 필요하고
		이러한 메서드들이 선언 되어 있는 클래스를
		Controller라고 한다.
		따라서 CRUD 메서드들이 선언되어 있으며,
		각 메서드들의 SQL문 결과값은 Model 객체에
		저장하여 리턴해 준다.


MVC 종류

-model1
	소규모 프로젝트에 사용되는 방식이며, 컨트롤러 안에 view가 구현되기 때문에
	설계와 작업은 쉬우나 유지보수가 어렵다.
-model2
	대규모 프로젝트에 사용되는 방식이며, 모든 요소가 분리되어 있기 때문에
	설계와 작업은 어려우나 유지보수가 쉽다.

	프로젝트의 규모와 특성에 맞춰서 적절한 설계 패턴을 적용해야 한다.
-----------------------------------------------------------------------------

















































